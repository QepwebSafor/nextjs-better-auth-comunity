
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}


model User {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  role          UserRole  @default(USER)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  sessions Session[]
  accounts Account[]
  articles    Articles[] // ❌ Remove `@relation(onDelete: Cascade)` here
  comments    Comment[]  // ❌ Remove `@relation(onDelete: Cascade)` here
  likes       Like[]     // ❌ Remove `@relation(onDelete: Cascade)` here
}
model Author {
  id        String   @id @default(uuid())
  name          String
  email         String    @unique
  image         String
  role          UserRole  @default(USER)
  
}



model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}
model Articles {
  id            String    @id @default(cuid())
  title         String
  content       String
  category      String
  featuredImage String
  author        User?      @relation(fields: [authorId], references: [id], onDelete: Cascade) // ✅ Add here
  authorId      String
  comments      Comment[] // ❌ Remove `@relation(onDelete: Cascade)` here
  likes         Like[]   // ❌ Remove `@relation(onDelete: Cascade)` here
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade) // ✅ Add here
  authorId  String
  article   Articles @relation(fields: [articleId], references: [id], onDelete: Cascade) // ✅ Add here
  articleId String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // ✅ Add here
  userId    String
  article   Articles @relation(fields: [articleId], references: [id], onDelete: Cascade) // ✅ Add here
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model Contact {
   id        String   @id @default(cuid())
  postername String
  message    String
  email      String
  phone      String
  createdAt  DateTime @default(now())
}
